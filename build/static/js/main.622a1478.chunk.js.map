{"version":3,"sources":["components/Header.js","components/Navbar.js","components/MyApps.js","components/Input.js","utils.js","components/AddStory.js","components/CreateApp.js","components/StoryPage.js","components/StoryDiv.js","components/MyStories.js","components/AppDetails.js","components/AllStories.js","components/ProfilePage.js","components/Dashboard.js","components/TopBar.js","components/LoginPage.js","components/SignUpPage.js","App.js","serviceWorker.js","index.js"],"names":["Header","useState","popUpVisibility","changeVisibility","className","onClick","fetch","then","document","location","Navbar","props","url","useRouteMatch","links","path","text","history","useHistory","navLinks","map","link","index","to","activeClassName","exact","key","push","user","id","name","MyApps","apps","updateApps","refresh","updateRefresh","useEffect","res","json","protected","appDivs","Input","placeholder","value","onChange","event","updateChange","target","type","sendPostRequest","body","method","JSON","stringify","headers","getPostOptions","AddStory","title","updateTitle","updateBody","cols","rows","storyId","CreateApp","updateName","homePage","updateHomepage","callbackUrl","updateCallback","description","updateDescription","test","updateTestStatus","isError","updateRegisterStatus","fields","Object","values","every","appId","StoryPage","responses","story","updateStory","useParams","message","updateMessage","updateRefreshState","responseDivs","response","ownerId","username","moment","receivedAt","format","state","style","marginTop","trim","fontWeight","StoryDiv","MyStories","stories","updateStories","AppDetails","appDetails","updateAppDetails","details","clientId","clientSecret","width","AllStories","isLoading","setLoading","ProfilePage","updateUserData","email","company","Dashboard","useLocation","routers","component","page","TopBar","LoginPage","updateUsername","password","updatePassword","updateLoginStatus","status","SignUpPage","updateEmail","updateCompany","usernameExists","updateSignStatus","App","isLoggedIn","updateLoggedInStatus","updateUserDetails","loggedIn","userDetails","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.622a1478.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst Header = function () {\n  const [popUpVisibility, changeVisibility] = useState(false);\n\n  const logout = () =>\n    fetch('/api/logout').then(() => {\n      document.location = '/';\n    });\n\n  return (\n    <div className='topBar'>\n      <span>Blog</span>\n      <div className={`${!popUpVisibility ? '' : 'hide'} homeOptions`}>\n        <button onClick={() => changeVisibility(true)}>Logout</button>\n      </div>\n      <div className={`${popUpVisibility ? '' : 'hide'} logoutPopup`}>\n        <p>Are you sure to logout ?</p>\n        <div className='logoutOptions'>\n          <button onClick={logout}>Yes</button>\n          <button onClick={() => changeVisibility(false)}>No</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport { NavLink, useRouteMatch, useHistory } from 'react-router-dom';\n\nconst Navbar = function (props) {\n  const { url } = useRouteMatch();\n\n  const links = [\n    { path: `${url}`, text: 'All stories' },\n    { path: `${url}/myStories`, text: 'Your stories' },\n    { path: `${url}/addStory`, text: 'Add story' },\n    { path: `${url}/myApps`, text: 'Your apps' },\n    { path: `${url}/createApp`, text: 'Add app' }\n    // { path: `${url}/user/${props.user.id}`, text: 'Your profile' },\n    // { path: '/dashboard/followers', text: 'Followers' },\n    // { path: '/dashboard/following', text: 'Following' },\n    // { path: '/dashboard/findFriends', text: 'Find friends' }\n  ];\n\n  const history = useHistory();\n\n  const navLinks = links.map((link, index) => (\n    <NavLink\n      to={link.path}\n      activeClassName='activeLink'\n      exact\n      key={`navLink_${index}`}\n    >\n      {link.text}\n    </NavLink>\n  ));\n\n  const toProfile = () => history.push(`/dashboard/user/${props.user.id}`);\n\n  return (\n    <div className='navbar'>\n      <p onClick={toProfile}>Hello {props.user.name}</p>\n      {navLinks}\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React, { useState, useEffect } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\n\nconst MyApps = function () {\n  const [apps, updateApps] = useState([]);\n  const [refresh, updateRefresh] = useState(false);\n  const history = useHistory();\n\n  useEffect(() => {\n    fetch('/api/getMyApps')\n      .then(res => res.json())\n      .then(res => {\n        if (res.protected) {\n          return history.push('/dashboard');\n        }\n        updateApps(res.apps);\n        updateRefresh(true);\n      });\n  }, [refresh, history]);\n\n  const appDivs = apps.map(({ id, name }, index) => {\n    return (\n      <div key={`apps_${index}`} className='appDiv'>\n        <Link to={`/dashboard/app/${id}`}>{name}</Link>\n      </div>\n    );\n  });\n\n  return <div className='dashboard-container'>{appDivs}</div>;\n};\n\nexport default MyApps;\n","import React from 'react';\n\nconst Input = function (props) {\n  const handleChange = function (event) {\n    props.updateChange(event.target.value);\n  };\n\n  return (\n    <input\n      placeholder={props.placeholder}\n      value={props.value}\n      onChange={handleChange}\n      type={props.type}\n    ></input>\n  );\n};\n\nexport default Input;\n","const getPostOptions = function (body) {\n  return {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers: {\n      'content-type': 'application/json'\n    }\n  };\n};\n\nconst sendPostRequest = function (url, body) {\n  return fetch(url, getPostOptions(body)).then(res => res.json());\n};\n\nexport default sendPostRequest;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Input from './Input';\nimport sendPostRequest from '../utils';\n\nconst AddStory = function () {\n  const [title, updateTitle] = useState('');\n  const [body, updateBody] = useState('');\n  const history = useHistory();\n  const submitStory = function () {\n    sendPostRequest('/api/addStory', { title, body }).then(res => {\n      history.push(`/dashboard/story/${res.storyId}`);\n    });\n  };\n\n  return (\n    <div className='dashboard-container'>\n      <div className='addStory'>\n        <h3>Add new story</h3>\n        <Input\n          placeholder='Enter Title'\n          value={title}\n          updateChange={updateTitle}\n          type='text'\n        />\n        <textarea\n          placeholder='Enter content'\n          cols='100'\n          rows='15'\n          value={body}\n          onChange={event => updateBody(event.target.value)}\n        ></textarea>\n        <button onClick={submitStory}>Add Story</button>\n      </div>\n    </div>\n  );\n};\n\nexport default AddStory;\n","import React, { useState } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport Input from './Input';\nimport sendPostRequest from '../utils';\n\nconst CreateApp = function () {\n  const [name, updateName] = useState('');\n  const [homePage, updateHomepage] = useState('');\n  const [callbackUrl, updateCallback] = useState('');\n  const [description, updateDescription] = useState('');\n  const [test, updateTestStatus] = useState(true);\n  const [isError, updateRegisterStatus] = useState(false);\n\n  const history = useHistory();\n\n  const handleClick = function () {\n    const fields = { name, homePage, description, callbackUrl };\n    if (!Object.values(fields).every(value => value)) {\n      return updateTestStatus(false);\n    }\n    sendPostRequest('/api/createApp', fields).then(res => {\n      if (res.appId) {\n        return history.push(`/dashboard/app/${res.appId}`);\n      }\n      updateRegisterStatus(true);\n    });\n  };\n\n  if (isError)\n    return (\n      <div className='dashboard-container'>\n        <div className='createAppDiv'>\n          <h3>Couldn't Register app</h3>\n          <Link to='/dashboard/createApp'>Try again</Link>\n        </div>\n      </div>\n    );\n\n  return (\n    <div className='dashboard-container'>\n      <div className='createAppDiv'>\n        <h3>Create you auth app</h3>\n        <p className={test ? 'invisible' : ''}>Fields shouldn't be empty</p>\n        <label>\n          Application name <span>*</span>\n        </label>\n        <Input\n          value={name}\n          placeholder='eg: authApp'\n          type='text'\n          updateChange={updateName}\n        />\n        <label>\n          Homepage url <span>*</span>\n        </label>\n        <Input\n          value={homePage}\n          placeholder='eg: http://example.com'\n          type='text'\n          updateChange={updateHomepage}\n        />\n        <label>\n          Application Description <span>*</span>\n        </label>\n        <Input\n          value={description}\n          placeholder='eg: This is a nice app'\n          type='text'\n          updateChange={updateDescription}\n        />\n        <label>\n          Callback url <span>*</span>\n        </label>\n        <Input\n          value={callbackUrl}\n          placeholder='eg: /sample/path/'\n          type='text'\n          updateChange={updateCallback}\n        />\n        <button onClick={handleClick}>Register</button>\n      </div>\n    </div>\n  );\n};\n\nexport default CreateApp;\n","import React, { useState, useEffect } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport moment from 'moment';\nimport sendPostRequest from '../utils';\n\nimport Input from './Input';\n\nconst StoryPage = function () {\n  const [story, updateStory] = useState({ responses: [] });\n  const { id } = useParams();\n\n  const [message, updateMessage] = useState('');\n  const [refresh, updateRefreshState] = useState(false);\n\n  const history = useHistory();\n\n  useEffect(() => {\n    sendPostRequest('/api/getStory', { id: +id }).then(res => {\n      updateStory(res);\n    });\n  }, [refresh, id]);\n\n  const postResponse = function () {\n    if (message.trim() === '') return;\n    const options = { storyId: +id, message };\n    sendPostRequest('/api/addResponse', options).then(() => {\n      updateRefreshState(state => !state);\n      updateMessage('');\n    });\n  };\n\n  const responseDivs = story.responses.map(response => {\n    const toProfile = () => history.push(`/dashboard/user/${response.ownerId}`);\n\n    const deleteResponse = () =>\n      sendPostRequest('/api/deleteResponse', { id: response.id }).then(() => {\n        updateRefreshState(state => !state);\n      });\n    return (\n      <div className='response' key={`response_${response.id}`}>\n        <p>{response.message}</p>\n        <p>\n          Responded by,{' '}\n          <span className='creator' onClick={toProfile}>\n            {response.username}\n          </span>\n        </p>\n        <p className='date'>\n          {moment(response.receivedAt).format('MMM Do YYYY, h:m:ss A')}\n        </p>\n        <button onClick={deleteResponse}>Delete</button>\n      </div>\n    );\n  });\n\n  const deleteStory = () =>\n    sendPostRequest('/api/deleteStory', { id: story.id }).then(() => {\n      history.push('/dashboard');\n    });\n\n  return (\n    <div className='dashboard-container'>\n      <div className='storyPage'>\n        <div>\n          <h2>{story.title}</h2>\n          <p>Creator: {story.name}</p>\n          <p className='date'>\n            {moment(story.receivedAt).format('MMM Do YYYY, h:m:ss A')}\n          </p>\n          <button onClick={deleteStory}>Delete story</button>\n        </div>\n        <div className='body'>\n          <p>{story.body}</p>\n        </div>\n        <Input\n          value={message}\n          placeholder='You can response to this story'\n          updateChange={updateMessage}\n          type='text'\n        />\n        <button style={{ marginTop: '1%' }} onClick={postResponse}>\n          Respond\n        </button>\n        <p style={{ fontWeight: 600 }}>All responses</p>\n        <div>{responseDivs}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default StoryPage;\n","import React from 'react';\nimport moment from 'moment';\nimport { Link, useHistory } from 'react-router-dom';\n\nconst StoryDiv = function (props) {\n  const history = useHistory();\n  const toProfile = () =>\n    history.push(`/dashboard/user/${props.story.ownerId}`);\n\n  return (\n    <div className='story'>\n      <Link\n        to={`/dashboard/story/${props.story.id}`}\n        style={{ fontWeight: 600 }}\n      >\n        {props.story.title}\n      </Link>\n      <p>\n        Creator :{' '}\n        <span className='creator' onClick={toProfile}>\n          {props.story.name}\n        </span>\n      </p>\n      <p>{moment(props.story.receivedAt).format('MMM Do YYYY, h:m:ss A')}</p>\n    </div>\n  );\n};\n\nexport default StoryDiv;\n","import React, { useState, useEffect } from 'react';\nimport StoryDiv from './StoryDiv';\n\nconst MyStories = function () {\n  const [stories, updateStories] = useState([]);\n\n  useEffect(() => {\n    fetch('/api/yourStories')\n      .then(res => res.json())\n      .then(updateStories);\n  }, []);\n\n  return (\n    <div className='dashboard-container'>\n      {stories.map(story => (\n        <StoryDiv story={story} key={`story_${story.id}`} />\n      ))}\n    </div>\n  );\n};\n\nexport default MyStories;\n","import React, { useState, useEffect } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport sendPostRequest from '../utils';\n\nconst AppDetails = function () {\n  const { id } = useParams();\n  const history = useHistory();\n  const [appDetails, updateAppDetails] = useState(null);\n\n  useEffect(() => {\n    sendPostRequest('/api/getAppDetails', { id: +id }).then(res => {\n      if (res.protected) {\n        return history.push('/dashboard');\n      }\n      updateAppDetails(res.details);\n    });\n  }, [id, history]);\n\n  if (appDetails === null) return <div className='dashboard-container'></div>;\n\n  return (\n    <div className='dashboard-container'>\n      <div className='appDetails'>\n        <h3>\n          App name: <span>{appDetails.name}</span>\n        </h3>\n        <h3>\n          Client Id: <span>{appDetails.clientId}</span>\n        </h3>\n        <h3>\n          Client Secret: <span>{appDetails.clientSecret}</span>\n        </h3>\n        <h3>\n          Description: <span>{appDetails.description}</span>\n        </h3>\n        <h3>\n          Homepage: <span>{appDetails.homePage}</span>\n        </h3>\n        <h3>\n          Callback url: <span>{appDetails.callbackUrl}</span>\n        </h3>\n        <h3>\n          Created at: <span>Few minutes ago</span>\n        </h3>\n        <button style={{ width: '20%' }}>Transfer Ownership</button>\n      </div>\n    </div>\n  );\n};\n\nexport default AppDetails;\n","import React, { useState, useEffect } from 'react';\nimport StoryDiv from './StoryDiv';\n\nconst AllStories = function () {\n  const [stories, updateStories] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetch('/api/allStories')\n      .then(res => res.json())\n      .then(stories => {\n        updateStories(stories);\n        setLoading(false);\n      });\n    return () => setLoading(true);\n  }, []);\n\n  if (isLoading)\n    return <div className='dashboard-container'>Stories are loading...</div>;\n\n  return (\n    <div className='dashboard-container'>\n      {stories.map(story => (\n        <StoryDiv story={story} key={`story_${story.id}`} />\n      ))}\n    </div>\n  );\n};\n\nexport default AllStories;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport sendPostRequest from '../utils';\n\nconst ProfilePage = function () {\n  const [user, updateUserData] = useState(null);\n  const { id } = useParams();\n\n  useEffect(() => {\n    sendPostRequest('/api/userDetails', { id: +id }).then(updateUserData);\n  }, [id]);\n\n  if (!user) return <div>Content loading...</div>;\n\n  const { name, username, email, company } = user;\n\n  return (\n    <div className='dashboard-container'>\n      <div className='profileBox'>\n        <p>\n          Name: <span>{name}</span>\n        </p>\n        <p>\n          Username: <span>{username}</span>\n        </p>\n        <p>\n          Email: <span>{email}</span>\n        </p>\n        <p>\n          Company: <span>{company}</span>\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default ProfilePage;\n","import React from 'react';\nimport { useLocation, Switch, Route } from 'react-router-dom';\n\nimport Header from './Header';\nimport NavBar from './Navbar';\nimport MyApps from './MyApps';\nimport AddStory from './AddStory';\nimport CreateApp from './CreateApp';\nimport StoryPage from './StoryPage';\nimport MyStories from './MyStories';\nimport AppDetails from './AppDetails';\nimport AllStories from './AllStories';\nimport ProfilePage from './ProfilePage';\n\nconst Dashboard = function (props) {\n  const location = useLocation();\n\n  const pages = [\n    { path: '/dashboard', component: AllStories },\n    { path: '/dashboard/myApps', component: MyApps },\n    { path: '/dashboard/addStory', component: AddStory },\n    { path: '/dashboard/app/:id', component: AppDetails },\n    { path: '/dashboard/createApp', component: CreateApp },\n    { path: '/dashboard/myStories', component: MyStories },\n    { path: '/dashboard/story/:id', component: StoryPage },\n    { path: '/dashboard/user/:id', component: ProfilePage }\n  ];\n\n  const routers = pages.map((page, index) => (\n    <Route exact path={page.path} key={`dashboard_router${index}`}>\n      <page.component user={props.user} />\n    </Route>\n  ));\n\n  return (\n    <div>\n      <Header />\n      <div className='dashboard'>\n        <NavBar user={props.user} />\n        <Switch location={location}>{routers}</Switch>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst TopBar = function () {\n  return (\n    <div className='topBar'>\n      <span>Blog</span>\n      <div className='homeOptions'>\n        <Link to='/'>Home</Link>\n      </div>\n    </div>\n  );\n};\n\nexport default TopBar;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Input from './Input';\nimport TopBar from './TopBar';\n\nimport sendPostRequest from '../utils';\n\nconst LoginPage = function () {\n  const [username, updateUsername] = useState('');\n  const [password, updatePassword] = useState('');\n  const [test, updateTestStatus] = useState(true);\n  const [isError, updateLoginStatus] = useState(false);\n\n  const handleClick = function () {\n    const fields = { username, password };\n    if (!Object.values(fields).every(value => value)) {\n      return updateTestStatus(false);\n    }\n    sendPostRequest('/api/loginToApp', fields).then(res => {\n      if (res.status) {\n        return (document.location = '/dashboard');\n      }\n      updateLoginStatus(true);\n    });\n  };\n\n  if (isError) {\n    return (\n      <div>\n        <TopBar />\n        <h3>Login failed</h3>\n        <Link to='/login'>Try again</Link>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <TopBar />\n      <div className='loginWindow'>\n        <h3>Login To your account</h3>\n        <p className={test ? 'invisible' : ''}>Fields shouldn't be empty</p>\n        <label>\n          Username <span>*</span>\n        </label>\n        <Input\n          placeholder='eg: John'\n          type='text'\n          value={username}\n          updateChange={updateUsername}\n        />\n        <label>\n          Password <span>*</span>\n        </label>\n        <Input\n          placeholder='eg: John@123'\n          type='password'\n          value={password}\n          updateChange={updatePassword}\n        />\n        <button onClick={handleClick}>Login</button>\n        <span className='signupQuestion'>\n          Do not have an account ?<Link to='/signup'>Signup</Link>\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginPage;\n","import React, { useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport Input from './Input';\nimport TopBar from './TopBar';\n\nimport sendPostRequest from '../utils';\n\nconst SignUpPage = function () {\n  const [name, updateName] = useState('');\n  const [username, updateUsername] = useState('');\n  const [email, updateEmail] = useState('');\n  const [company, updateCompany] = useState('');\n  const [password, updatePassword] = useState('');\n  const [test, updateTestStatus] = useState(true);\n  const [usernameExists, updateSignStatus] = useState(false);\n\n  const history = useHistory();\n\n  const handleClick = function () {\n    const fields = { name, username, password, email, company };\n    if (!Object.values(fields).every(value => value !== '')) {\n      return updateTestStatus(false);\n    }\n    sendPostRequest('/api/signinToApp', fields).then(res => {\n      if (res.status) {\n        return history.push('/');\n      }\n      updateSignStatus(true);\n    });\n  };\n\n  if (usernameExists) {\n    return (\n      <div>\n        <TopBar />\n        <h3>Username already exists</h3>\n        <Link to='/signup'>Try again</Link>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <TopBar />\n      <div className='loginWindow'>\n        <h3>Create your account</h3>\n        <p className={test ? 'invisible' : ''}>Fields shouldn't be empty</p>\n        <label>\n          Name <span>*</span>\n        </label>\n        <Input\n          placeholder='eg: John'\n          type='text'\n          value={name}\n          updateChange={updateName}\n        />\n        <label>\n          Username <span>*</span>\n        </label>\n        <Input\n          placeholder='eg: John'\n          value={username}\n          type='text'\n          updateChange={updateUsername}\n        />\n        <label>\n          Email <span>*</span>\n        </label>\n        <Input\n          placeholder='eg: John@example.com'\n          value={email}\n          type='text'\n          updateChange={updateEmail}\n        />\n        <label>\n          Company <span>*</span>\n        </label>\n        <Input\n          value={company}\n          type='text'\n          placeholder='eg: Example Pvt Ltd.'\n          updateChange={updateCompany}\n        />\n        <label>\n          Password <span>*</span>\n        </label>\n        <Input\n          placeholder='eg: John@123'\n          value={password}\n          type='password'\n          updateChange={updatePassword}\n        />\n        <button onClick={handleClick}>Signup</button>\n        <span className='signupQuestion'>\n          Have an account ?<Link to='/login'>Login</Link>\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default SignUpPage;\n","import React, { useState, useEffect } from 'react';\nimport { Switch, Route, Redirect, BrowserRouter } from 'react-router-dom';\n\nimport './App.css';\nimport './auth.css';\n\nimport Dashboard from './components/Dashboard';\nimport LoginPage from './components/LoginPage';\nimport SignUpPage from './components/SignUpPage';\n\nconst App = function () {\n  const [isLoggedIn, updateLoggedInStatus] = useState(false);\n  const [user, updateUserDetails] = useState({});\n\n  useEffect(() => {\n    fetch('/isLoggedIn')\n      .then(res => res.json())\n      .then(res => {\n        updateLoggedInStatus(res.loggedIn);\n        updateUserDetails(res.userDetails);\n      });\n  }, []);\n\n  return (\n    <div className='App'>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path='/'>\n            {isLoggedIn ? <Redirect to='/dashboard' /> : <LoginPage />}\n          </Route>\n          <Route exact path='/login'>\n            {isLoggedIn ? <Redirect to='/dashboard' /> : <LoginPage />}\n          </Route>\n          <Route exact path='/signup'>\n            {isLoggedIn ? <Redirect to='/dashboard' /> : <SignUpPage />}\n          </Route>\n          <Route path='/dashboard'>\n            {isLoggedIn ? <Dashboard user={user} /> : <Redirect to='/' />}\n          </Route>\n          <Redirect to='/' />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}